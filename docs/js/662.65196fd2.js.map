{"version":3,"file":"js/662.65196fd2.js","mappings":"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","sources":["webpack://my_blog/./src/api/algorithm.ts","webpack://my_blog/./src/components/algorithm/AlgorithmList.vue?a998","webpack://my_blog/./src/components/algorithm/AlgorithmList.vue","webpack://my_blog/./src/components/algorithm/AlgorithmList.vue?fbba"],"sourcesContent":["import request from '@/utils/request'\r\nimport type { BaseResponse } from '@/utils/request'\r\n\r\nexport interface Algorithm {\r\n  id: number\r\n  title: string\r\n  category: string\r\n  difficulty: string\r\n  timeComplexity: string\r\n  spaceComplexity: string\r\n  createTime?: Date\r\n  updateTime?: Date\r\n  readCount?: number\r\n  content?: string  // API 返回的 markdown 内容\r\n}\r\n\r\n// API 响应类型\r\nexport interface ApiResponse<T> {\r\n  code: number\r\n  message: string\r\n  data: T\r\n}\r\n\r\nexport const algorithmApi = {\r\n  getAllAlgorithms(): Promise<BaseResponse<Algorithm[]>> {\r\n    return request({\r\n      url: '/algorithms',\r\n      method: 'GET'\r\n    })\r\n  },\r\n\r\n  getAlgorithmById(id: string): Promise<BaseResponse<Algorithm>> {\r\n    return request({\r\n      url: `/algorithms/${id}`,\r\n      method: 'GET'\r\n    })\r\n  },\r\n\r\n  updateAlgorithmById(id: string, data: Algorithm): Promise<BaseResponse<Algorithm>> {\r\n    return request({\r\n      url: `/algorithms/${id}`,\r\n      method: 'PUT',\r\n      data\r\n    })\r\n  }\r\n} ","import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, unref as _unref, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx, resolveComponent as _resolveComponent } from \"vue\"\n\nconst _hoisted_1 = { class: \"algorithm-list-container\" }\nconst _hoisted_2 = { class: \"algorithm-list\" }\nconst _hoisted_3 = {\n  key: 0,\n  class: \"loading-state\"\n}\nconst _hoisted_4 = {\n  key: 1,\n  class: \"list-content\"\n}\nconst _hoisted_5 = { class: \"item-header\" }\nconst _hoisted_6 = { class: \"item-title\" }\nconst _hoisted_7 = { class: \"item-info\" }\nconst _hoisted_8 = { class: \"category\" }\nconst _hoisted_9 = { class: \"complexity\" }\nconst _hoisted_10 = { class: \"complexity\" }\nconst _hoisted_11 = { class: \"read-count\" }\nconst _hoisted_12 = {\n  key: 0,\n  class: \"pagination\"\n}\n\nimport { ref, onMounted } from 'vue'\r\nimport { ElSkeleton, ElTag, ElPagination } from 'element-plus'\r\nimport { Folder, Timer, Monitor, View } from '@element-plus/icons-vue'\r\nimport { algorithmApi, type Algorithm } from '@/api/algorithm'\r\nimport 'particles.js'\r\n\r\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'AlgorithmList',\n  setup(__props) {\n\r\nconst loading = ref(true)\r\nconst algorithms = ref<Algorithm[]>([])\r\nconst currentPage = ref(1)\r\nconst pageSize = ref(10)\r\nconst total = ref(0)\r\n\r\n// 获取难度标签类型\r\nconst getDifficultyType = (difficulty: string) => {\r\n  switch (difficulty?.toLowerCase()) {\r\n    case '简单':\r\n      return 'success'\r\n    case '中等':\r\n      return 'warning'\r\n    case '困难':\r\n      return 'danger'\r\n    default:\r\n      return 'info'\r\n  }\r\n}\r\n\r\n// 获取算法列表\r\nconst getAlgorithms = async () => {\r\n  try {\r\n    loading.value = true\r\n    const response = await algorithmApi.getAllAlgorithms()\r\n    if (response.code === 200) {\r\n      algorithms.value = response.data\r\n      total.value = response.data.length\r\n    }\r\n  } catch (error) {\r\n    console.error('获取算法列表失败:', error)\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 处理页码变化\r\nconst handlePageChange = (page: number) => {\r\n  currentPage.value = page\r\n  getAlgorithms()\r\n}\r\n\r\n// 初始化粒子效果\r\nconst initParticles = () => {\r\n  window.particlesJS('particles-js', {\r\n    particles: {\r\n      number: { value: 80, density: { enable: true, value_area: 800 } },\r\n      color: { value: '#ffffff' },\r\n      shape: { type: 'circle' },\r\n      opacity: { value: 0.5, random: false },\r\n      size: { value: 3, random: true },\r\n      line_linked: {\r\n        enable: true,\r\n        distance: 150,\r\n        color: '#ffffff',\r\n        opacity: 0.4,\r\n        width: 1\r\n      },\r\n      move: {\r\n        enable: true,\r\n        speed: 6,\r\n        direction: 'none',\r\n        random: false,\r\n        straight: false,\r\n        out_mode: 'out',\r\n        bounce: false\r\n      }\r\n    },\r\n    interactivity: {\r\n      detect_on: 'canvas',\r\n      events: {\r\n        onhover: { enable: true, mode: 'grab' },\r\n        onclick: { enable: true, mode: 'push' },\r\n        resize: true\r\n      },\r\n      modes: {\r\n        grab: { distance: 140, line_linked: { opacity: 1 } },\r\n        push: { particles_nb: 4 }\r\n      }\r\n    },\r\n    retina_detect: true\r\n  })\r\n}\r\n\r\nonMounted(() => {\r\n  getAlgorithms()\r\n  initParticles()\r\n})\r\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_el_icon = _resolveComponent(\"el-icon\")!\n  const _component_router_link = _resolveComponent(\"router-link\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n      id: \"particles-js\",\n      class: \"particles-container\"\n    }, null, -1)),\n    _createElementVNode(\"div\", _hoisted_2, [\n      (loading.value)\n        ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [\n            _createVNode(_unref(ElSkeleton), {\n              rows: 10,\n              animated: \"\"\n            })\n          ]))\n        : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [\n            (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(algorithms.value, (item) => {\n              return (_openBlock(), _createElementBlock(\"div\", {\n                key: item.id,\n                class: \"algorithm-item\"\n              }, [\n                _createVNode(_component_router_link, {\n                  to: `/algorithm/${item.id}`,\n                  class: \"item-link\"\n                }, {\n                  default: _withCtx(() => [\n                    _createElementVNode(\"div\", _hoisted_5, [\n                      _createElementVNode(\"h2\", _hoisted_6, _toDisplayString(item.title), 1),\n                      _createVNode(_unref(ElTag), {\n                        type: getDifficultyType(item.difficulty),\n                        size: \"large\"\n                      }, {\n                        default: _withCtx(() => [\n                          _createTextVNode(_toDisplayString(item.difficulty), 1)\n                        ]),\n                        _: 2\n                      }, 1032, [\"type\"])\n                    ]),\n                    _createElementVNode(\"div\", _hoisted_7, [\n                      _createElementVNode(\"span\", _hoisted_8, [\n                        _createVNode(_component_el_icon, null, {\n                          default: _withCtx(() => [\n                            _createVNode(_unref(Folder))\n                          ]),\n                          _: 1\n                        }),\n                        _createTextVNode(\" \" + _toDisplayString(item.category), 1)\n                      ]),\n                      _createElementVNode(\"span\", _hoisted_9, [\n                        _createVNode(_component_el_icon, null, {\n                          default: _withCtx(() => [\n                            _createVNode(_unref(Timer))\n                          ]),\n                          _: 1\n                        }),\n                        _createTextVNode(\" 时间复杂度: \" + _toDisplayString(item.timeComplexity), 1)\n                      ]),\n                      _createElementVNode(\"span\", _hoisted_10, [\n                        _createVNode(_component_el_icon, null, {\n                          default: _withCtx(() => [\n                            _createVNode(_unref(Monitor))\n                          ]),\n                          _: 1\n                        }),\n                        _createTextVNode(\" 空间复杂度: \" + _toDisplayString(item.spaceComplexity), 1)\n                      ]),\n                      _createElementVNode(\"span\", _hoisted_11, [\n                        _createVNode(_component_el_icon, null, {\n                          default: _withCtx(() => [\n                            _createVNode(_unref(View))\n                          ]),\n                          _: 1\n                        }),\n                        _createTextVNode(\" \" + _toDisplayString(item.readCount || 0), 1)\n                      ])\n                    ])\n                  ]),\n                  _: 2\n                }, 1032, [\"to\"])\n              ]))\n            }), 128)),\n            (total.value > 0)\n              ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [\n                  _createVNode(_unref(ElPagination), {\n                    \"current-page\": currentPage.value,\n                    \"onUpdate:currentPage\": _cache[0] || (_cache[0] = ($event: any) => ((currentPage).value = $event)),\n                    \"page-size\": pageSize.value,\n                    total: total.value,\n                    onCurrentChange: handlePageChange,\n                    layout: \"prev, pager, next\"\n                  }, null, 8, [\"current-page\", \"page-size\", \"total\"])\n                ]))\n              : _createCommentVNode(\"\", true)\n          ]))\n    ])\n  ]))\n}\n}\n\n})","<template>\r\n  <div class=\"algorithm-list-container\">\r\n    <!-- 粒子背景 -->\r\n    <div id=\"particles-js\" class=\"particles-container\"></div>\r\n\r\n    <div class=\"algorithm-list\">\r\n      <!-- 加载状态 -->\r\n      <div v-if=\"loading\" class=\"loading-state\">\r\n        <el-skeleton :rows=\"10\" animated />\r\n      </div>\r\n\r\n      <!-- 算法列表 -->\r\n      <div v-else class=\"list-content\">\r\n        <div v-for=\"item in algorithms\" :key=\"item.id\" class=\"algorithm-item\">\r\n          <router-link :to=\"`/algorithm/${item.id}`\" class=\"item-link\">\r\n            <div class=\"item-header\">\r\n              <h2 class=\"item-title\">{{ item.title }}</h2>\r\n              <el-tag :type=\"getDifficultyType(item.difficulty)\" size=\"large\">\r\n                {{ item.difficulty }}\r\n              </el-tag>\r\n            </div>\r\n            \r\n            <div class=\"item-info\">\r\n              <span class=\"category\">\r\n                <el-icon><Folder /></el-icon>\r\n                {{ item.category }}\r\n              </span>\r\n              <span class=\"complexity\">\r\n                <el-icon><Timer /></el-icon>\r\n                时间复杂度: {{ item.timeComplexity }}\r\n              </span>\r\n              <span class=\"complexity\">\r\n                <el-icon><Monitor /></el-icon>\r\n                空间复杂度: {{ item.spaceComplexity }}\r\n              </span>\r\n              <span class=\"read-count\">\r\n                <el-icon><View /></el-icon>\r\n                {{ item.readCount || 0 }}\r\n              </span>\r\n            </div>\r\n          </router-link>\r\n        </div>\r\n\r\n        <!-- 分页 -->\r\n        <div class=\"pagination\" v-if=\"total > 0\">\r\n          <el-pagination\r\n            v-model:current-page=\"currentPage\"\r\n            :page-size=\"pageSize\"\r\n            :total=\"total\"\r\n            @current-change=\"handlePageChange\"\r\n            layout=\"prev, pager, next\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted } from 'vue'\r\nimport { ElSkeleton, ElTag, ElPagination } from 'element-plus'\r\nimport { Folder, Timer, Monitor, View } from '@element-plus/icons-vue'\r\nimport { algorithmApi, type Algorithm } from '@/api/algorithm'\r\nimport 'particles.js'\r\n\r\nconst loading = ref(true)\r\nconst algorithms = ref<Algorithm[]>([])\r\nconst currentPage = ref(1)\r\nconst pageSize = ref(10)\r\nconst total = ref(0)\r\n\r\n// 获取难度标签类型\r\nconst getDifficultyType = (difficulty: string) => {\r\n  switch (difficulty?.toLowerCase()) {\r\n    case '简单':\r\n      return 'success'\r\n    case '中等':\r\n      return 'warning'\r\n    case '困难':\r\n      return 'danger'\r\n    default:\r\n      return 'info'\r\n  }\r\n}\r\n\r\n// 获取算法列表\r\nconst getAlgorithms = async () => {\r\n  try {\r\n    loading.value = true\r\n    const response = await algorithmApi.getAllAlgorithms()\r\n    if (response.code === 200) {\r\n      algorithms.value = response.data\r\n      total.value = response.data.length\r\n    }\r\n  } catch (error) {\r\n    console.error('获取算法列表失败:', error)\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 处理页码变化\r\nconst handlePageChange = (page: number) => {\r\n  currentPage.value = page\r\n  getAlgorithms()\r\n}\r\n\r\n// 初始化粒子效果\r\nconst initParticles = () => {\r\n  window.particlesJS('particles-js', {\r\n    particles: {\r\n      number: { value: 80, density: { enable: true, value_area: 800 } },\r\n      color: { value: '#ffffff' },\r\n      shape: { type: 'circle' },\r\n      opacity: { value: 0.5, random: false },\r\n      size: { value: 3, random: true },\r\n      line_linked: {\r\n        enable: true,\r\n        distance: 150,\r\n        color: '#ffffff',\r\n        opacity: 0.4,\r\n        width: 1\r\n      },\r\n      move: {\r\n        enable: true,\r\n        speed: 6,\r\n        direction: 'none',\r\n        random: false,\r\n        straight: false,\r\n        out_mode: 'out',\r\n        bounce: false\r\n      }\r\n    },\r\n    interactivity: {\r\n      detect_on: 'canvas',\r\n      events: {\r\n        onhover: { enable: true, mode: 'grab' },\r\n        onclick: { enable: true, mode: 'push' },\r\n        resize: true\r\n      },\r\n      modes: {\r\n        grab: { distance: 140, line_linked: { opacity: 1 } },\r\n        push: { particles_nb: 4 }\r\n      }\r\n    },\r\n    retina_detect: true\r\n  })\r\n}\r\n\r\nonMounted(() => {\r\n  getAlgorithms()\r\n  initParticles()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.algorithm-list-container {\r\n  min-height: 100vh;\r\n  padding: 20px;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.particles-container {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: linear-gradient(45deg, #1b2735 0%, #090a0f 100%);\r\n  z-index: -1;\r\n}\r\n\r\n.algorithm-list {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.loading-state {\r\n  padding: 20px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 8px;\r\n}\r\n\r\n.algorithm-item {\r\n  margin-bottom: 20px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 8px;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.algorithm-item:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.item-link {\r\n  display: block;\r\n  padding: 20px;\r\n  color: #fff;\r\n  text-decoration: none;\r\n}\r\n\r\n.item-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.item-title {\r\n  margin: 0;\r\n  font-size: 1.5em;\r\n  color: #fff;\r\n}\r\n\r\n.item-info {\r\n  display: flex;\r\n  gap: 20px;\r\n  color: #a8a8a8;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.item-info span {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 30px;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n:deep(.el-pagination) {\r\n  --el-pagination-bg-color: transparent;\r\n  --el-pagination-hover-color: #409eff;\r\n  --el-text-color-primary: #fff;\r\n}\r\n</style> ","import script from \"./AlgorithmList.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./AlgorithmList.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./AlgorithmList.vue?vue&type=style&index=0&id=566b2a2e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-566b2a2e\"]])\n\nexport default __exports__"],"names":["algorithmApi","getAllAlgorithms","request","url","method","getAlgorithmById","id","updateAlgorithmById","data","_hoisted_1","class","_hoisted_2","_hoisted_3","key","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_defineComponent","__name","setup","__props","loading","ref","algorithms","currentPage","pageSize","total","getDifficultyType","difficulty","toLowerCase","getAlgorithms","async","value","response","code","length","error","console","handlePageChange","page","initParticles","window","particlesJS","particles","number","density","enable","value_area","color","shape","type","opacity","random","size","line_linked","distance","width","move","speed","direction","straight","out_mode","bounce","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","push","particles_nb","retina_detect","onMounted","_ctx","_cache","_component_el_icon","_resolveComponent","_component_router_link","_openBlock","_createElementBlock","_createElementVNode","_createVNode","_unref","ElSkeleton","rows","animated","_Fragment","_renderList","item","to","default","_withCtx","_toDisplayString","title","ElTag","_createTextVNode","_","Folder","category","Timer","timeComplexity","Monitor","spaceComplexity","View","readCount","ElPagination","$event","onCurrentChange","layout","_createCommentVNode","__exports__"],"sourceRoot":""}